https://gist.github.com/elusive94/7ece57cf649022c87c10dc1614b9d986
https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04
https://www.digitalocean.com/community/tutorials/openvpn-ubuntu-16-04-ru
https://openvpn.net/index.php/open-source/documentation/howto.html#startup
##
Насройка подлючения через SSH туннель
https://redfern.me/tunneling-openvpn-through-ssh/
##
# Двойной VPN на основе OpenVPN

# Сначало настроим второй сервер:

## Шаг 1. Установка OpenVPN

sudo apt-get update
sudo apt-get install openvpn easy-rsa

## Шаг 2. Создание директории центра сертификации
OpenVPN это виртуальная частная сеть, использующая TLS/SSL. Это означает, что OpenVPN использует сертификаты для шифрования трафика между сервером и клиентами. Для выпуска доверенных сертификатов (trusted certificates) нам потребуется создать наш собственный центр сертификации.

Создайте пользователя с именем, например, openvpn-ca и перейдите в его домашний каталог:

adduser openvpn-ca

Добавляем пользователя в группу sudo для выполнения комманд с привилегиями суперпользователя

adduser openvpn-ca sudo

su - openvpn-ca

Для начала скопируем шаблонную директорию easy-rsa в нашу домашнюю директорию с помощью команды make-cadir:

make-cadir ~/openvpn-ca
cd ~/openvpn-ca

## Шаг 3. Настройка переменных центра сертификации
Для настройки переменных нашего центра сертификации нам необходимо отредактировать файл vars. Откройте этот файл в вашем текстовом редакторе:

nano vars

Внутри файла вы найдёте переменные, которые можно отредактировать, и которые задают параметры сертификатов при их создании. Нам нужно изменить всего несколько переменных.

> ~/openvpn-ca/vars

. . .

export KEY_COUNTRY="US"
export KEY_PROVINCE="NY"
export KEY_CITY="New York City"
export KEY_ORG="DigitalOcean"
export KEY_EMAIL="admin@example.com"
export KEY_OU="Community"

. . .

Пока мы в этом файле, отредактируем значение ``KEY_NAME`` чуть ниже, которое заполняет поле субъекта сертификатов. Для простоты зададим ему название ``server02``:

> ~/openvpn-ca/vars

export KEY_NAME="server02"

Сохраните и закройте файл.

## Шаг 4. Создание центра сертификации
Теперь мы можем использовать заданные нами переменные и утилиты easy-rsa для создания центра сертификации.

Убедитесь, что вы находитесь в директории центра сертификации и используйте команду source к файлу vars. В моем случае также потребовалось добавить симлинк к файлу openssl-1.0.0.cnf:

cd ~/openvpn-ca
ln -s ~/openvpn-ca/openssl-1.0.0.cnf openssl.cnf
source vars

Вы должны увидеть следующий вывод:

Вывод
NOTE: If you run ./clean-all, I will be doing a rm -rf on /home/sammy/openvpn-ca/keys

Убедимся, что мы работаем в "чистой среде" выполнив следующую команду:

./clean-all

Теперь мы можем создать наш корневой центр сертификации командой:

./build-ca

Эта команда запустит процесс создания ключа и сертификата корневого центра сертификации. Поскольку мы задали все переменные в файле vars, все необходимые значения будут введены автоматически. Нажимайте ENTER для подтверждения выбора.

Теперь у нас есть центр сертификации, который мы сможем использовать для создания всех остальных необходимых нам файлов.

## Шаг 5. Создание сертификата, ключа и файлов шифрования для сервера
Далее создадим сертификат, пару ключей и некоторые дополнительные файлы, используемые для осуществления шифрования, для нашего сервера.

Начнём с создания сертификата OpenVPN и ключей для сервера. Это можно сделать следующей командой:
> Внимание: Если ранее вы выбрали имя, отличное от server, вам придётся немного изменить некоторые инструкции. Например, при копировании созданных файлов в директорию /etc/openvpn вам придётся заменить имена на заданные вами. Вам также придётся изменить файл /etc/openvpn/server.conf для того, чтобы он указывал на корректные .crt и .key файлы.

./build-key-server server

Вывод опять будет содержать значения по умолчанию, переданные этой команде (server), а также значения из файла vars.

Согласитесь со всеми значениями по умолчанию, нажимая **ENTER**. *Не задавайте* **challenge password**. В конце процесса два раза введите **y** для подписи и подтверждения создания сертификата:

Вывод
. . .

Certificate is to be certified until May  1 17:51:16 2026 GMT (3650 days)
Sign the certificate? [y/n]:y

1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated

Далее создадим оставшиеся файлы. Мы можем сгенерировать сильные ключи протокола Диффи-Хеллмана, используемые при обмене ключами, командой:

./build-dh

Для завершения этой команды может потребоваться несколько минут.

Далее мы можем сгенерировать подпись **HMAC** для усиления способности сервера проверять целостность **TSL**:

sudo openvpn --genkey --secret keys/ta.key

## Шаг 6. Создание сертификата и пары ключей для клиента
Далее мы можем сгенерировать сертификат и пару ключей для клиента. Вообще это можно сделать и на клиентской машине и затем подписать полученный ключ центром сертификации сервера, но в этой статье для простоты мы сгенерируем подписанный ключ на сервере.

В этой статье мы создадим ключ и сертификат только для одного клиента. Если у вас несколько клиентов, вы можете повторять этот процесс сколько угодно раз. Просто каждый раз передавайте уникальное значение скрипту.

Поскольку мы можем вернуться к этому шагу позже, мы повторим команду source для файла vars. Мы будем использовать параметр client1 для создания первого сертификата и ключа.

Для создания файлов без пароля для облегчения автоматических соединений используйте команду build-key:

cd ~/openvpn-ca
source vars
./build-key homebook
./build-key tiuphone
./build-key toaphone

В ходе процесса создания файлов все значения по умолчанию будут введены, вы можете нажимать **ENTER**. Не задавайте challenge password и введите **y** на запросы о подписи и подтверждении создания сертификата.

## Шаг 7. Настройка сервиса OpenVPN
Далее настроим сервис OpenVPN с использованием созданных ранее файлов.

**Копирование файлов в директорию OpenVPN**
Нам необходимо скопировать нужные нам файлы в директорию /etc/openvpn.

Сначала скопируем созданные нами файлы. Они находятся в директории ~/openvpn-ca/keys, в которой они и были созданы. Нам необходимо скопировать сертификат и ключ центра сертификации, сертификат и ключ сервера, подпись **HMAC** и файл **Diffie-Hellman**: 

cd ~/openvpn-ca/keys
sudo mkdir /etc/openvpn/keys
sudo cp ca.crt server.crt server.key dh2048.pem ta.key /etc/openvpn/keys/

Далее нам необходимо скопировать и распаковать файл-пример конфигурации **OpenVPN** в конфигурационную директорию, мы будем использовать этот файл в качестве базы для наших настроек:

gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz | sudo tee /etc/openvpn/server.conf

**Настройка конфигурации OpenVPN**
Теперь, когда наши файлы находятся на своём месте, займёмся настройкой конфигурационного файла сервера:

sudo nano /etc/openvpn/server.conf

*Базовая настройка*

port 886
proto tcp
dev tun0
ca /etc/openvpn/keys/ca.crt
cert /etc/openvpn/keys/server.crt
key /etc/openvpn/keys/server.key  # This file should be kept secret
dh /etc/openvpn/keys/dh2048.pem
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
tls-server
tls-auth /etc/openvpn/keys/ta.key 0 # This file is secret
key-direction 0
cipher AES-256-CBC 
auth SHA256
comp-lzo
max-clients 10
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
verb 0
log /dev/null
status /dev/null

Сохраните и закройте файл.

## Шаг 8. Настройка сетевой конфигурации сервера
Далее нам необходимо настроить сетевую конфигурацию сервера, чтобы **OpenVPN** мог корректно перенаправлять трафик.

**Настройка перенаправления IP**
Сначала разрешим серверу перенаправлять трафик. Это ключевая функциональность нашего **VPN** сервера.

Настроим это в файле /etc/sysctl.conf:

sudo vi /etc/sysctl.conf

Найдите строку настройки net.ipv4.ip_forward. Удалите **"#"** из начала строки, чтобы раскомментировать её:

>/etc/sysctl.conf

net.ipv4.ip_forward=1

Сохраните и закройте файл.

Для применения настроек к текущей сессии наберите команду:

sudo sysctl -p

**Настройка правил UFW для сокрытия соединений клиентов**
Вам нужно установить файрвол **UFW**. Нам потребуется файрвол для манипулирования с входящим на сервер трафиком. Мы должны изменить файл настроек для сокрытия соединений (masquerading).

sudo apt-get update
sudo apt-get install ufw

Перед настройкой уточните название сетевого интерфейса

ifconfig

Откроем файл /etc/ufw/before.rules и добавим туда соответствующие настройки:

sudo vi /etc/ufw/before.rules

Это файл содержит настройки **UFW**, которое применяются перед применением правил **UFW**. Добавьте в начало файла выделенные красным строки. Это настроит правила, применяемые по умолчанию, к цепочке POSTROUTING в таблице nat и будет скрывать весь трафик от **VPN**:

> /etc/ufw/before.rules

#
# rules.before
#
# Rules that should be run before the ufw command line added rules. Custom
# rules should be added to one of these chains:
#   ufw-before-input
#   ufw-before-output
#   ufw-before-forward
#

# START OPENVPN RULES
# NAT table rules
*nat
:POSTROUTING ACCEPT [0:0] 
# Allow traffic from OpenVPN client to "Название сетевого интерфейса"
-A POSTROUTING -s 10.8.0.0/24 -o "Название сетевого интерфейса" -j MASQUERADE
COMMIT
# END OPENVPN RULES

# Don't delete these required lines, otherwise there will be errors
*filter
. . .

Сохраните и закройте файл.

Теперь мы должны сообщить **UFW**, что ему по умолчанию необходимо разрешать перенаправленные пакеты. Для этого откройте файл /etc/default/ufw:

sudo vi /etc/default/ufw

Найдите в файле директиву DEFAULT_FORWARD_POLICY. Мы изменим значение с DROP на ACCEPT:

> /etc/default/ufw

DEFAULT_FORWARD_POLICY="ACCEPT"

Сохраните и закройте файл.

**Открытие порта OpenVPN и применение изменений**
Далее настроим сам файрвол для разрешения трафика в **OpenVPN**.

Если вы не меняли порт и протокол в файле /etc/openvpn/server.conf, вам необходимо разрешить трафик **UDP** для порта **1194**. Если вы изменили эти настройки, введите указанные вами значения. В моем случае это **UDP** порт **443**

**Также добавьте ваш SSH порт**

sudo ufw allow OpenSSH
sudo ufw allow 886

Теперь деактивируем и активируем **UFW** для применения внесённых изменений:

sudo ufw disable
sudo ufw enable

Теперь наш сервер сконфигурирован для обработки трафика OpenVPN.

## Шаг 9. Включение сервиса OpenVPN
Мы готовы включит сервис **OpenVPN** на нашем сервере. Мы можем сделать это с помощью **systemd**.

Нам необходимо запустить сервер **OpenVPN** указав имя нашего файла конфигурации в качестве переменной после имени файла **systemd**. Файл конфигурации для нашего сервера называется /etc/openvpn/server.conf, поэтому мы добавим @server в конец имени файла при его вызове:

sudo systemctl start openvpn@server

Убедимся, что сервис успешно запущен командой:

sudo systemctl status openvpn@server

Если всё в порядке, настроем сервис на автоматическое включение при загрузке сервера:

sudo systemctl enable openvpn@server


## Шаг 10. Доставка конфигураций клиентам

Теперь мы должны переместить файл конфигурации на клиентское устройство.

Создаем файл user.ovpn на машине клиента с параметрами:

client
dev tun0
proto tcp
remote ip-remote port
nobind
persist-key
persist-tun
cipher AES-256-CBC
auth SHA256
comp-lzo
verb 3
key-direction 1
route-method exe
mssfix
auth-nocache
tun-mtu 1500
script-security 2
tls-client
remote-cert-tls server
tls-auth ta.key 1
cert user.crt
key user.key 
ca ca.crt

и копируем с сервера файлы ca.crt, user.crt, user.key, ta.key из /home/openvpn-ca/openvpn-ca/keys

Не забываем удалить user.key с сервера после скачивания.


## Шаг 11. Удаление пользователя из группы

su - root

deluser openvpn-ca sudo

## Шаг 12. Запуск ВПН в Windows в клиенте openVPN GUI

Копируем все файлы в директорию C:\Program Files\OpenVPN\config
Запускает клиента с правами администратора. ЗАпусаем ВПН!!!)


## Шаг 13. Прописываем правила маршрутизации на первом сервере:**

Создадим скрипт ```/etc/openvpn/upstream-route.sh``` содержащий следующие команды:

#!/bin/sh

ip rule add from 10.8.0.0/24 table 120
ip route add default dev tun0 table 120

exit 0

chmod +x /etc/openvpn/upstream-route.sh


-----------------------------------------------------

## Отзыв клиентских сертификатов
Время от времени, вам может понадобиться отозвать клиентский сертификат для предотвращения доступа к серверу **VPN**

Для этого зайдите в вашу директорию центра сертификации и введите команды:

cd ~/openvpn-ca
source ./vars
./revoke-full "имя клиента"

-----------------------------------------------------

https://github.com/Angristan/OpenVPN-install/issues/129
Решение проблемы запуска daemon() failed or unsupported: Resource temporarily unavailable (errno=11)
Workaround:

    comment out the LimitNPROC line in /lib/systemd/system/openvpn@.service
    systemctl daemon-reload

Проверка настроек openvpn --config /etc/openvpn/server.conf

-----------------------------------------------------

 TLS Error: TLS key negotiation failed to occur within 60 seconds (check your network connectivity)

One of the most common problems in setting up OpenVPN is that the two OpenVPN daemons on either side of the connection are unable to establish a TCP or UDP connection with each other.

This is almost a result of:

    A perimeter firewall on the server's network is filtering out incoming OpenVPN packets (by default OpenVPN uses UDP or TCP port number 1194).
    A software firewall running on the OpenVPN server machine itself is filtering incoming connections on port 1194. Be aware that many OSes will block incoming connections by default, unless configured otherwise.
    A NAT gateway on the server's network does not have a port forward rule for TCP/UDP 1194 to the internal address of the OpenVPN server machine.
    The OpenVPN client config does not have the correct server address in its config file. The remote directive in the client config file must point to either the server itself or the public IP address of the server network's gateway.
    Another possible cause is that the windows firewall is blocking access for the openvpn.exe binary. You may need to whitelist (add it to the "Exceptions" list) it for OpenVPN to work.
